<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection/>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>BR Syntax</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	// 1. Create an object to store rows from a table
	var myObj = new GlideRecord('table_name');
	
	// 2. Build query
	myObj.addQuery('field_name','operator','value');
	myObj.addQuery('field_name','operator','value');
	
	// 3. Execute query
	myObj.query();
	
	// 4. Process returned records
	while(myObj.next()){
		//Logic you want to execute.
		//Use myObj.field_name to reference record fields
	}
	
	
	// iterate through all records in the GlideRecord and set the Priority field value to 4 (low priority).
	// update the record in the database
	while(myObj.next()){
		myObj.priority = 4;
		myObj.update();
	}
	
	
	// Set the Priority field value to 4 (low priority) for the first record in the GlideRecord
	// update the record in the database
	if(myObj.next()){
		myObj.priority = 4;
		myObj.update();
	}
	
	
	// When using updateMultiple() use the setValue() method.  If you do myObj.priority = 4, ALL
	// records in the table will be updated and not just the GlideRecord records.
	myObj.setValue('priority',4);
	myObj.updateMultiple();
	
	
	// If you need to know the row count for a query on a production instance do this
	var count = new GlideAggregate('x_snc_needit_needit');
	count.addAggregate('COUNT');
	count.query();
	var recs = 0;
	if (count.next()){
		recs = count.getAggregate('COUNT');
	}
	gs.info("Returned number of rows = " +recs);
	
	// Don't do this on a production instance.
	var myObj = new GlideRecord('x_snc_needit_needit');
	myObj.query();
	gs.info("Returned record count = " + myObj.getRowCount());
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-11-19 07:07:05</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e5bd0491dbae03002927788dbf961903</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>BR Syntax</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_e5bd0491dbae03002927788dbf961903</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-11-19 07:08:27</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e5bd0491dbae03002927788dbf961903"/>
</record_update>
